TEST PARSING     = -> OK   / -> FAUX        * -> CORRIGE

problemes:
- "" ou '' entourees d'espaces compte comme un argument \0       ----semble fix
- "" ou '' coller a une chaine = ignorer (compter les espaces apres)
- "text" ou 'text' doit compter les espaces apres
- $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $)

0. If the first contains a /, we must print a "No such file or directory
instead of "command not found"

1. ec""ho test 
Ok
2. ""echo test
Ok
3. echo"" test
Ok
4. echo "" test
FAIL
5. echo $USER
Ok
6. echo $USE""R
Ok 
7. echo ""$USER
Ok
8. echo "$"USER
Ok
9. echo  $""USER
it's fine $"" has a special meaning in bash (word translation) this is not var expansion
Ok

10. ec''ho test
Ok

11. ''echo test
Ok

12. echo'' test
Ok

13. echo '' test
FAIL

15. echo $USE''R
Ok

16. echo ''$USER
Ok

17. echo '$'USER
Ok

18. echo  $''USER
Fail but it is fine $'' has a special meaning in bash (word translation) 

19. echo $   
Ok

20. echo $"" 
Fail for same reason as 9 and 18

21. echo "" "" "" 
Fail to print a three spaces ? Wtf ?

21.2 
"" "" ""
""""""
Fail at the parsing level

22. echo """"""
Fail to print two spaces ? Wtf ?

23. ls ""
Ok

24. echo $USER"" '' 
Ok

25. ls '"    
To see bash errror message --> unclosed quote then ctrl+d
OK

26. ls "'
OK

27. ls "    " 
Ok

28. ls "  ' " 
Ok

29. "ls"
Ok

30. l"s" 
Ok

31. ls"" -la 
Ok

32. ls "" -la
Ok

33. ls """"-la
Ok

34. ls ""-la
Ok

35. echo test""test
Ok

36. echo test"" test
Ok

37. echo test ""test 
Ok
38. echo test "'"test 
Ok
39. echo $$$USER
Ok

39.1 $USER$notexist$$notexist$HOME
Ok

40. echo $$USER 
Ok

41. echo $USER$USER 
Ok

42. echo $USER""$USER
Ok

43. echo $USER" "$USER 
Ok

44. echo "|" ls 
FAIL

45. echo test$1test 
45.1 echo $1$USER
Technically it's a special variable and not an env one
`info bash` says a env var name can't start with a number
So what we do is  OK, $1 is interpreted just like $:

46. echo test$var_qui_nexiste_pas
Ok

47. echo "$USER>>" OK
Ok

48. echo "$USER11111fjfjfjf"
Ok

49. echo $\"echo 
Should fail on unclosed quotes since we don't interpret \
Ok

50. echo "test$<test"
Ok

51. echo test$<test
Fail because of message, we should print "minishell:" at start of error message
else works OK

52. echo "test$-r"
53. echo "test$-?" 
Special var. We don't handle. OK

54. echo $-1$USER
OK

55. echo $1
56. echo "$1" 
Ok. We don't handle special variables (parameters ?)

57. echo  $"USER"
58. echo  $'USER'
$"" and $''  is special case we don't have to handle it.
Ok

60. echo '"abc"'
Ok

62. echo test |cat
Ok

63. echo koala ||| cat
Fail. prompt never returns if not C^c
bash prints : "bash: syntax error near unexpected token `|'"
We need a function that check for >>>, <<<, || etc.

64. >minishell export A=1 B=2 C=3 D=4 E=5 F=6 G=7 H=8 
>minishell echo "$A'$B"'$C"$D'$E'"$F"'"'$G'$H"
1'2$C   5"$F"'7'8
We don't handles multiple export yet do we ?

'65. echo '  "abc" '
Ok

66. echo " $ " | cat -e
Ok

67. echo $:$= | cat -e
Ok

68. export FOO=' " '
Can't test now
69. echo " $FOO " | cat -e

70. ./printargv "" "" "" 
Fails.Leaks

72. <test wc -l
Fail
We must handle redir eveywhere on the command line
